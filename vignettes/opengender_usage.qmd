---
title: "OpenGender Usage"
format: html
editor: visual
---

```{r setup}
library(opengender)
```

```{r list-available}
# show available dictionaries
list_dict()
```

```{r show-dictionary}
show_dict("kantro")
```

```{r test-data}
# common baby names 1923-2022 
#-- from https://www.ssa.gov/oact/babynames/decades/century.html
ssa_baby_names.df <- structure(list( firstname = c("James", "Robert", "John", "Michael", 
"David", "William", "Richard", "Joseph", "Thomas", "Christopher", 
"Charles", "Daniel", "Matthew", "Anthony", "Mark", "Donald", 
"Steven", "Andrew", "Paul", "Joshua", "Kenneth", "Kevin", "Brian", 
"George", "Timothy", "Ronald", "Jason", "Edward", "Jeffrey", 
"Ryan", "Jacob", "Gary", "Nicholas", "Eric", "Jonathan", "Stephen", 
"Larry", "Justin", "Scott", "Brandon", "Benjamin", "Samuel", 
"Gregory", "Alexander", "Patrick", "Frank", "Raymond", "Jack", 
"Dennis", "Jerry", "Tyler", "Aaron", "Jose", "Adam", "Nathan", 
"Henry", "Zachary", "Douglas", "Peter", "Kyle", "Noah", "Ethan", 
"Jeremy", "Walter", "Christian", "Keith", "Roger", "Terry", "Austin", 
"Sean", "Gerald", "Carl", "Harold", "Dylan", "Arthur", "Lawrence", 
"Jordan", "Jesse", "Bryan", "Billy", "Bruce", "Gabriel", "Joe", 
"Logan", "Alan", "Juan", "Albert", "Willie", "Elijah", "Wayne", 
"Randy", "Vincent", "Mason", "Roy", "Ralph", "Bobby", "Russell", 
"Bradley", "Philip", "Eugene", "Mary", "Patricia", "Jennifer", 
"Linda", "Elizabeth", "Barbara", "Susan", "Jessica", "Sarah", 
"Karen", "Lisa", "Nancy", "Betty", "Sandra", "Margaret", "Ashley", 
"Kimberly", "Emily", "Donna", "Michelle", "Carol", "Amanda", 
"Melissa", "Deborah", "Stephanie", "Dorothy", "Rebecca", "Sharon", 
"Laura", "Cynthia", "Amy", "Kathleen", "Angela", "Shirley", "Brenda", 
"Emma", "Anna", "Pamela", "Nicole", "Samantha", "Katherine", 
"Christine", "Helen", "Debra", "Rachel", "Carolyn", "Janet", 
"Maria", "Catherine", "Heather", "Diane", "Olivia", "Julie", 
"Joyce", "Victoria", "Ruth", "Virginia", "Lauren", "Kelly", "Christina", 
"Joan", "Evelyn", "Judith", "Andrea", "Hannah", "Megan", "Cheryl", 
"Jacqueline", "Martha", "Madison", "Teresa", "Gloria", "Sara", 
"Janice", "Ann", "Kathryn", "Abigail", "Sophia", "Frances", "Jean", 
"Alice", "Judy", "Isabella", "Julia", "Grace", "Amber", "Denise", 
"Danielle", "Marilyn", "Beverly", "Charlotte", "Natalie", "Theresa", 
"Diana", "Brittany", "Doris", "Kayla", "Alexis", "Lori", "Marie"
), Female = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)), row.names = c(NA, 
-200L), class = "data.frame")


```

```{r}
library(magrittr)

names_sample.df <- ssa_baby_names.df %>%
  dplyr::slice_sample(n=1000, replace=TRUE)

names_sample.df %<>% 
  dplyr::bind_rows(tibble::tibble(firstname=c("Wozzleface","Hanah")))

names_sample.df %>% 
  add_gender_predictions(
              dicts = "kantro",
              col_map=c(given = "firstname") ) -> res

res

```

```{r}

gender_mean <- function(x,  simplify_output = "tidy") {

    termlist <- c("per_F","per_M","per_O")
    output_types <- c("tidy","row","scalar")
    
    if(!simplify_output %in% output_types) {
      warning("unsupport output type -- using tidy")
      simplify_output <- "tidy"
    }

    #normalize  from either pr_F or og_details  as vector, list, or tibble
    if(is.data.frame(x)) {
      if (ncol(x)==1) {
        x.df <- x[[1]]
      }
    } else {
       x.df <- x
    }
    
    if(inherits(x.df,"list")) {
      x.df <- purrr::list_rbind(x.df)
    } else if(is.numeric(x.df)) {
      x.df <- tibble::tibble( pr_F = x.df )
      x.df %<>%
        dplyr::mutate(pr_M=1-pr_F,pr_O=0*pr_F,n=NA_integer_)
    } 
    
    x.df %<>% dplyr::select(pr_M,pr_F,n) %>%
      dplyr::mutate(pr_O=1-pr_M-pr_F) %>%
      dplyr::relocate(pr_F,pr_M,pr_O,n)

    res_cum <- NULL
    
    x.df %>%
        dplyr::summarize(
          dplyr::across(dplyr::starts_with("pr_"),
                        ~ mean(.x, na.rm = TRUE)
          )
        ) %>% tidyr::pivot_longer(dplyr::everything()) %>%
        dplyr::rename(term=name , mean =value) -> res_cur
    

    res_cum %<>% dplyr::bind_cols(res_cur)

    if (simplify_output=="tidy") {
       res_final <- res_cum 
    } else if (simplify_output=="scalar") {
      res_final <- res_cum[[1,2]]
    } else {
      if (ncol(res_cum)==2) {
        res_final <- res_cum %>% 
          tidyr::pivot_wider(names_from="term", values_from=2)
      } else {
        res_final <- res_cum[1,]
      }
    }
    res_final
}

gender_mean(res[["og_pr_F"]])
gender_mean(res[["og_pr_F"]], simplify_output="row")
gender_mean(res[["og_pr_F"]], simplify_output="scalar")


res %>% dplyr::select("og_pr_F") %>% gender_mean()
res %>% dplyr::select("og_details") %>% gender_mean()

res %>% dplyr::mutate(AM=stringr::str_starts(firstname,"[A-M]")) %>%
  dplyr::group_by(AM) %>% dplyr::summarise(prop_F= mean(og_pr_F,na.rm=TRUE))

res %>% dplyr::mutate(AM=stringr::str_starts(firstname,"[A-M]")) %>%
  dplyr::group_by(AM) %>% dplyr::summarise(prop_F = gender_mean(og_pr_F,simplify_output="scalar"))

res %>% dplyr::mutate(AM=stringr::str_starts(firstname,"[A-M]")) %>%
  dplyr::group_by(AM) %>% dplyr::summarise(prop_genders = gender_mean(og_pr_F,simplify_output="row")) %>% tidyr::unpack(prop_genders)

res %>% dplyr::mutate(AM=stringr::str_starts(firstname,"[A-M]")) %>%
  dplyr::group_by(AM) %>% dplyr::summarise(prop_F = list( gender_mean(og_pr_F)))
```
