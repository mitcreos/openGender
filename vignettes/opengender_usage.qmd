---
title: "OpenGender Usage"
format: html
editor: visual
---

```{r setup}
library(opengender)
```

```{r list-available}
# show available dictionaries
list_dicts()
```

```{r show-dictionary}
show_dict("kantro")
```

```{r test-data}
# common baby names 1923-2022 
#-- from https://www.ssa.gov/oact/babynames/decades/century.html
ssa_baby_names.df <- structure(list( firstname = c("James", "Robert", "John", "Michael", 
"David", "William", "Richard", "Joseph", "Thomas", "Christopher", 
"Charles", "Daniel", "Matthew", "Anthony", "Mark", "Donald", 
"Steven", "Andrew", "Paul", "Joshua", "Kenneth", "Kevin", "Brian", 
"George", "Timothy", "Ronald", "Jason", "Edward", "Jeffrey", 
"Ryan", "Jacob", "Gary", "Nicholas", "Eric", "Jonathan", "Stephen", 
"Larry", "Justin", "Scott", "Brandon", "Benjamin", "Samuel", 
"Gregory", "Alexander", "Patrick", "Frank", "Raymond", "Jack", 
"Dennis", "Jerry", "Tyler", "Aaron", "Jose", "Adam", "Nathan", 
"Henry", "Zachary", "Douglas", "Peter", "Kyle", "Noah", "Ethan", 
"Jeremy", "Walter", "Christian", "Keith", "Roger", "Terry", "Austin", 
"Sean", "Gerald", "Carl", "Harold", "Dylan", "Arthur", "Lawrence", 
"Jordan", "Jesse", "Bryan", "Billy", "Bruce", "Gabriel", "Joe", 
"Logan", "Alan", "Juan", "Albert", "Willie", "Elijah", "Wayne", 
"Randy", "Vincent", "Mason", "Roy", "Ralph", "Bobby", "Russell", 
"Bradley", "Philip", "Eugene", "Mary", "Patricia", "Jennifer", 
"Linda", "Elizabeth", "Barbara", "Susan", "Jessica", "Sarah", 
"Karen", "Lisa", "Nancy", "Betty", "Sandra", "Margaret", "Ashley", 
"Kimberly", "Emily", "Donna", "Michelle", "Carol", "Amanda", 
"Melissa", "Deborah", "Stephanie", "Dorothy", "Rebecca", "Sharon", 
"Laura", "Cynthia", "Amy", "Kathleen", "Angela", "Shirley", "Brenda", 
"Emma", "Anna", "Pamela", "Nicole", "Samantha", "Katherine", 
"Christine", "Helen", "Debra", "Rachel", "Carolyn", "Janet", 
"Maria", "Catherine", "Heather", "Diane", "Olivia", "Julie", 
"Joyce", "Victoria", "Ruth", "Virginia", "Lauren", "Kelly", "Christina", 
"Joan", "Evelyn", "Judith", "Andrea", "Hannah", "Megan", "Cheryl", 
"Jacqueline", "Martha", "Madison", "Teresa", "Gloria", "Sara", 
"Janice", "Ann", "Kathryn", "Abigail", "Sophia", "Frances", "Jean", 
"Alice", "Judy", "Isabella", "Julia", "Grace", "Amber", "Denise", 
"Danielle", "Marilyn", "Beverly", "Charlotte", "Natalie", "Theresa", 
"Diana", "Brittany", "Doris", "Kayla", "Alexis", "Lori", "Marie"
), Female = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)), row.names = c(NA, 
-200L), class = "data.frame")


```

```{r}
library(magrittr)

names_sample.df <- ssa_baby_names.df %>%
  dplyr::slice_sample(n=1000, replace=TRUE)

names_sample.df %<>% 
  dplyr::bind_rows(tibble::tibble(firstname=c("Wozzleface","Hanah")))

names_sample.df %>% 
  add_gender_predictions(
              dicts = "kantro",
              col_map=c(given = "firstname") ) -> res

res

```

```{r}

res %>% dplyr::select("og_pr_F") %>% gender_mean()
res %>% dplyr::select("og_details") %>% gender_mean(simplify_output = "tidy")

res %>% dplyr::mutate(AM=stringr::str_starts(firstname,"[A-M]")) %>%
  dplyr::group_by(AM) %>% dplyr::summarise(prop_F= mean(og_pr_F,na.rm=TRUE))

res %>% dplyr::mutate(AM=stringr::str_starts(firstname,"[A-M]")) %>%
  dplyr::group_by(AM) %>% dplyr::summarise(prop_F = gender_mean(og_pr_F,simplify_output="scalar"))

res %>% dplyr::mutate(AM=stringr::str_starts(firstname,"[A-M]")) %>%
  dplyr::group_by(AM) %>% dplyr::summarise(prop_genders = gender_mean(og_pr_F,simplify_output="row")) %>% tidyr::unpack(prop_genders)

res %>% dplyr::mutate(AM=stringr::str_starts(firstname,"[A-M]")) %>%
  dplyr::group_by(AM) %>% dplyr::summarise(prop_F = list( gender_mean(og_pr_F))) %>% tidyr::unnest(prop_F)
```

```{r}

res %>% dplyr::select("og_details") %>% gender_estimate()

res %>% dplyr::select("og_details") %>%
  gender_estimate(simplify_output="scalar", estimates=c("mean","sd"))

res %>% 
  dplyr::mutate(AM=stringr::str_starts(firstname,"[A-M]")) %>%
  dplyr::group_by(AM) %>% 
  dplyr::summarise(gender_estimates =
        gender_estimate(og_pr_F,simplify_output="row",
                        estimates=c("mean","sd"))) %>% 
  tidyr::unpack(gender_estimates)
```

```{r}
list_dicts()
clean_dicts() 
list_dicts()
data(kantro)
bizarro <- kantro %>% 
  dplyr::mutate(gender= dplyr::case_match(gender, "M"~"F", "F"~"M"))
comment(bizarro) <- "a bizarre dictionary"
try(manage_local_dicts(bizarro,name="kantro"))
manage_local_dicts(bizarro,name="bizarro", force=TRUE)
list_dicts()
show_dict("bizarro")
```

```         
```

\

"

```{r}

show_dict("wgen2")

dict.df %>% 
  slice_head(n=1000) %>%
  dplyr::group_by(given,year) %>% 
  dplyr::summarise(across(starts_with("pr_"), ~ weighted.mean(.x, w=n)),
                   n=sum(n),
                   .groups="drop_last") %>%
  dplyr::ungroup() %>%
  mutate(country="ALL")

dict.df %>% 
  slice_head(n=1000) %>%
  dplyr::group_by(given,country) %>% 
  dplyr::summarise(across(starts_with("pr_"), ~ weighted.mean(.x, w=n)),
                   n=sum(n),
                   .groups="drop_last") %>%
  dplyr::ungroup() %>%
  mutate(year="ALL")

dict.df %>% 
  slice_head(n=1000) %>%
  dplyr::group_by(given) %>% 
  dplyr::summarise(across(starts_with("pr_"), ~ weighted.mean(.x, w=n)),
                   n=sum(n),
                   .groups="drop_last") %>%
  dplyr::ungroup() %>%
  mutate(year="ALL") 



```
